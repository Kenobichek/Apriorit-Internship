namespace my_std
{
    template <class T>
    class shared_ptr {
    public:
        shared_ptr() : ptr(nullptr), count(new int(0)) {};
        shared_ptr(T* ptr) : ptr(ptr), count(new int(1)) {};

        shared_ptr(const shared_ptr& obj) {
            this->ptr = obj.ptr;
            this->count = obj.count;
            if (obj.ptr != nullptr) {
                (*this->count)++;
            }
        }
        shared_ptr& operator=(const shared_ptr& obj) {
            destroy();
            this->ptr = obj.ptr;
            this->count = obj.count;
            if (obj.ptr != nullptr) {
                (*this->count)++;
            }
        }
        shared_ptr(const shared_ptr&& obj) {
            this->ptr = obj.ptr;
            this->count = obj.count;
            obj.ptr = nullptr;
            obj.count = nullptr;
        }
        shared_ptr& operator=(const shared_ptr&& obj) {
            destroy();
            this->ptr = obj.ptr;
            this->count = obj.count;
            obj.ptr = nullptr;
            obj.count = nullptr;
        }
        int getCount() {
            return *count;
        }
        T* get() {
            return this->ptr;
        }
    private:
        T* ptr = nullptr;
        int* count = nullptr;

        void destroy() {
            (*count)--;
            if (*count == 0) {
                if (ptr == nullptr) {
                    delete ptr;
                }
                delete count;
            }
        }
    };
}
